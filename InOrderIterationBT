package Algorithms.DataStructure.Tree.BinaryTree.TreeTraversal;

import Algorithms.DataStructure.Tree.BinaryTree.BTNode;

import java.util.Stack;

public class InOrderIteration {
    public static void main(String[] args) {
        BTNode tree = new BTNode(1);
        tree.lChild = new BTNode(2);
        tree.rChild = new BTNode(3);
        tree.lChild.lChild = new BTNode(4);
        tree.lChild.rChild = new BTNode(5);
        tree.rChild.lChild = new BTNode(6);
        tree.rChild.rChild = new BTNode(7);
        tree.lChild.lChild.rChild = new BTNode(8);
        /*LevelOrder.LevelOrder(tree);*/
        InOrderIteration(tree);
    }

    public static void visit(BTNode node) {
        System.out.println(node.data);
    }

    public static void InOrderIteration(BTNode btNode) {
        Stack<BTNode> stack = new Stack<BTNode>();
        stack.add(btNode);
        while (!stack.isEmpty()) {
            while (btNode != null && btNode.lChild != null) {
                btNode = btNode.lChild;
                stack.add(btNode);
            }
            visit(stack.peek());
            if (stack.peek().rChild != null) {
                btNode = stack.pop().rChild;
                stack.add(btNode);
            } else {
                stack.pop();
                btNode = null;
            }
        }
    }
     /*   public static void InOrderIteration(BTNode btNode) {
        Stack<BTNode> stack = new Stack<BTNode>();
        while (btNode != null || !stack.isEmpty()) {
            if (btNode != null) {
                stack.add(btNode);
                btNode = btNode.lChild;
            } else {
                btNode = stack.pop();
                visit(btNode);
                btNode = btNode.rChild;
            }
        }
    }*/
}
