package Algorithms.DynamicProgramming;

public class L0005DP_Implementation_SelfVersion {
    public static void main(String[] args) {
        String target = "abccaccaabbaacc";
        String result = findLongestPalindrome(target);
        System.out.println(result);

    }

    private static String findLongestPalindrome(String target) {
        if (target.isEmpty()) {
            return "False Input";
        }
        int length = target.length();
        int[] record = new int[2];
        boolean[][] DPArray = new boolean[length][length];
        int maxLength = 0;
        Initialization(target, length, DPArray);
        /** 错误主要发生在这里   这种实现没办法保证  head+1 tail-1 对应的子问题被优先计算了
         * 因此无法得出正确结果。所以官方的那种解答方式是很有意义的。就是说赋值我可以用自己理解赋值
         * */
        for (int head = 0; head < length; head++) {
            for (int tail = 0; tail < length; tail++) {
                if (tail - head > 1 && target.charAt(tail) == target.charAt(head)) {
                    DPArray[head][tail] = DPArray[head + 1][tail - 1];
                }
            }
        }
        for (int head = 0; head < length; head++) {
            for (int tail = 0; tail < length; tail++) {
                if (DPArray[head][tail]==true && tail+1-head>maxLength) {
                    maxLength++;
                    record[0]=head;
                    record[1]=tail;
                }
            }
        }

        return target.substring(record[0],record[1]+1);
    }

    private static void Initialization(String target, int length, boolean[][] DPArray) {
        for (int head = 0; head < length; head++) {
            for (int tail = 0; tail < length; tail++) {
                if (head == tail) {
                    DPArray[head][tail] = true;
                }
            }
        }

        for (int head = 0; head < length; head++) {
            for (int tail = 0; tail < length; tail++) {
                if (tail - head == 1 && target.charAt(tail) == target.charAt(head)) {
                    DPArray[head][tail] = true;

                }
            }
        }
        for (int head = 0; head < length; head++) {
            for (int tail = 0; tail < length; tail++) {
                System.out.printf("%-15b",DPArray[head][tail]);
            }
            System.out.println();
        }
    }

}
