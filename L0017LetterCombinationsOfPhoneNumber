package Algorithms.LeetCode;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class L0017LetterCombinationsOfPhoneNumber {
    public static void main(String[] args) {
        String digits = "2267";
        Map<Character, String> phoneMap = new HashMap<Character, String>() {{
            put('2', "abc");
            put('3', "def");
            put('4', "ghi");
            put('5', "jkl");
            put('6', "mno");
            put('7', "pqrs");
            put('8', "tuv");
            put('9', "wxyz");
        }};
        List<String> combinations = new ArrayList<String>();
        StringBuffer combination = new StringBuffer();
        getTheCombination(digits, phoneMap, combination, combinations);
        for (int i = 0; i < combinations.size(); i++) {
            System.out.println(combinations.get(i));
        }

    }

    public static void getTheCombination(String digits, Map<Character, String> phoneMap, StringBuffer combination, List<String> combinations) {
        if (digits.isEmpty()) {
            combinations.add(combination.toString());
            return;
        }
        char digit = digits.charAt(0);
        String choiceOfDigit = phoneMap.get(digit);
        for (int i = 0; i < choiceOfDigit.length(); i++) {
            combination.append(choiceOfDigit.charAt(i));
            getTheCombination(digits.substring(1), phoneMap, combination, combinations);
            combination.deleteCharAt(combination.length() - 1);
        }
    }
}
