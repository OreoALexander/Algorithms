package Algorithms.BackTracing;

import java.util.HashMap;
import java.util.List;

import static Algorithms.JavaFundamentalApi.StringAPI.GetRangeOfVariableAndSubString.getRangeOfXiAndSubString;
import static Algorithms.JavaFundamentalApi.StringAPI.GetTheSolutionSetAndRecordArray.getTheSolutionSetAndRecordArray;

/**
 * 1 last time we do this the implementation is so complex to control it
 * and we do some analysis
 * 1 the construction of model ability is poor so we review the knight tour and the queen problem to find
 * the best way to handle the model we need to use a increment way to let the xi get the value and we do the
 * choice in the list of the range of the xi so that is a good way !
 * 2 use the easy data structure .
 * 2 so this time we are back .
 * so how to model the problem ?
 * 1 what is the solution variable and set ? why you want to use the backtrace ? we want to record the detail of the
 * matching process for some condition . if two string matches here are different combination and we really want to
 * see it ! that is really terrific
 * let we think yes
 * with the constraint we can find for a given pattern its solution set is fixed !
 * for example .*ac*.  the index 0 corresponds to .* ,1 represents a ,2 represents c* and 3 represents .
 * that is all about that and we can use simple data structure just string array to do this record . so how to do that
 * we can use the string to its char array and traverse it . in this process every time we find a xi. yes that is the
 * char[] we transfer it into string and put it into the string[]
 * 2 and with the big picture . every time we can find the you know the range of the xi with the constraint what happen?
 * the substring changed ! yes and so with the different substring transfer to the next layer ! so
 * the substring will influence the next you know range of the xi+1; that is the point !
 * so that is ok too ! so we can compute what the range of the current layer and do the selection
 * and we can also transfer the corresponding substring to next layer so how to implement it ?
 * yes after we put the you know . the xi into the string[] we can use the substring to do the divide .because from the
 * set view . range + substring  = current string . so we can use one method to produce this two . and the best way is
 * use the substring() method . for one 0 to i for the other one i ! yes .
 * 3 ok now we need to think how to return and the base condition to end the recursion !
 * if xi where i = n ; the range is nothing ! even no " " end return to the previous layer . do the repeal modification
 * movement .
 * that is it !
 * if xi where i = length -1 the range have somethings but with different type
 * if l-1 is "a"  so if we want happy ending the range must be "a"  ! return and display and how to display ?
 * no that is not good . yes when xi went to the next stage it means the previous stage ok . that is what we
 * design . but ! when display .? we need both to the end ! so we need add more check ! so the range is a .and substring
 * without a = empty , length == 0 ! ---- with a and substring = a ;
 * we can add a record string[] with the same length of the solution string[] that is great !
 * if l-1 = "." . can be any char or " "but the display need to both to the end and we don't want the array index overload
 * so ? when l-1 . if substring length == 1 . that is ok contains " " that is ok too !
 * and we will record "EMPTY" for the record if the substring == " "!
 * and ok with this thought . let we think ! if
 * C* in the l-1 and what is the end of the target substring .ok substring length == 0 is ok or substring .length is
 * not empty but will all the C .
 * so with same idea if l-1
 * is ".*" substring length == 0 is ok or substring.length is not 0
 * but we record different things ! in such way we do the right display ! wow that is many branches !
 * so what is the false cases?
 * that depends what stages ?
 * ok not to the end !
 * for "a" the available range list = 0 return;
 * "." the available range list = 0  return; but this is some special at least 1 ok ?
 * "c*" the available range list = 0  return; but this is some special at least 1 ok ?
 * ".*" the available range list = 0  return; but this is some special at least 1 ok ?
 * just at the end of the loop for the selection !
 * to the end
 * if in the end despite the display case  all other case is abandoned ! with a return ;
 * <p>
 * oh my god yes the thoughts are just very great but in the implementation . the string handling just kill me
 * and kick me ass ! that is too many detail to handle and the code become inevitable complex too much if and else
 * and yes too much too much empty handle ! that is just disaster ! so that is just a big problem
 * and maybe we should to learn how to trace the you know the matching or in the DP we want to know
 * we want to know the . the array index exceed and so on problems .
 * so we want to use the DP to get the result and use the trace method to record the match ! ?
 */
public class StringMatchProblem_BackTracingModel {
    public static void main(String[] args) {
        String pattern = "c*.*a.b";
        String target = "ccccccabcacb";
        HashMap<String, String[]> resultMap = getTheSolutionSetAndRecordArray(pattern);
        String[] solutionSet = resultMap.get("solutionSet");
        String[] record = resultMap.get("record");
        searchAvailableMatch(solutionSet, record, target, 0);

    }

    public static void searchAvailableMatch(String[] solutionSet, String[] record, String target, int order) {
        if (order == solutionSet.length-1 && target.isEmpty()) {
            for (int k = 0; k < record.length; k++) {
                if (record[k].isEmpty()) {
                    record[k] = "EMPTY";
                }
            }
            System.out.println("one valid result : ");
            for (int i = 0; i < record.length; i++) {
                System.out.printf("%-35s", record[i]);
            }
            System.out.println();
            return;
        }

        HashMap<String, List<String>> resultMap = getRangeOfXiAndSubString(solutionSet, target, order);
        List<String> availableRange = resultMap.get("availableRange");
        List<String> subStringForNextLayer = resultMap.get("subStringForNextLayer");
        for (int i = 0; i < availableRange.size(); i++) {
            record[order] = availableRange.get(i);
            order = order + 1;
            searchAvailableMatch(solutionSet, record, subStringForNextLayer.get(i), order);
            order = order - 1;
            record[order] = "NULL";
        }
        return;
    }


}
