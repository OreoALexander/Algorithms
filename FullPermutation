package Algorithms.BackTracing;

import java.util.ArrayList;
import java.util.List;

public class FullPermutation {
    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8};
        int[] label = {0, 0, 0, 0, 0, 0, 0, 0};
        int[] resultArray = {0, 0, 0, 0, 0, 0, 0, 0};
        getFullPermutation(numbers, resultArray, label, 0);
    }

    public static void getFullPermutation(int[] numbers, int[] resultArray, int[] label, int order) {

        if (order == 8) {
            System.out.println();
            for (int i = 0; i < 8; i++) {
                System.out.printf("%-5d", resultArray[i]);
            }
        }

        List<Integer> availableNum = getAvailableNum(numbers, label);
        for (int i = 0; i < availableNum.size(); i++) {
            resultArray[order] = availableNum.get(i);
            int j = findElementPosition(availableNum.get(i), numbers);
            label[j] = 1;
            order++;
            getFullPermutation(numbers, resultArray, label, order);
            order--;
            label[j] = 0;
            resultArray[order] = 0;
        }
        return;
    }

    public static List<Integer> getAvailableNum(int[] numbers, int[] label) {
        List<Integer> availableNum = new ArrayList<>();
        for (int i = 0; i < 8; i++) {
            if (label[i] == 0) {
                availableNum.add(numbers[i]);
            }
        }
        return availableNum;
    }

    public static int findElementPosition(int Element, int[] numbers) {
        for (int i = 0; i < 8; i++) {
            if (Element == numbers[i]) {
                return i;
            }
        }
        return -1;
    }

}
