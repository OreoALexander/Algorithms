package Algorithms.LeetCode;

import java.util.ArrayList;
import java.util.List;

/**
 * Given an array nums of distinct integers, return all the possible permutations.
 * You can return the answer in any order.
 */
public class L0046PermutationsV1 {
    public static void main(String[] args) {
        int[] nums = {1, 2, 3};
        List<List<Integer>> result = getPermutations(nums);
        System.out.println(result.toString());
    }

    public static List<List<Integer>> getPermutations(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        if (nums.length == 0 || nums == null) return result;
        backTraceSearch(result, new ArrayList<>(), nums, new boolean[nums.length]);
        return result;
    }

    public static void backTraceSearch(List<List<Integer>> result, List<Integer> record, int[] nums, boolean[] label) {
        if (record.size() == nums.length) {
            result.add(new ArrayList<>(record));
        }
        for (int i = 0; i < nums.length; i++) {
            if (label[i]) continue;
            label[i] = true;
            record.add(nums[i]);
            backTraceSearch(result, record, nums, label);
            label[i] = false;
            record.remove(record.size() - 1);
        }
    }
}
